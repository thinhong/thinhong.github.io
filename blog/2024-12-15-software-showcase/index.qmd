---
title: "Creating a software showcase on a Quarto website"
date: "2024-12-15"
categories: [tutorial, quarto]
author:
  - name: Thinh Ong
    url: https://drthinhong.com
    orcid: 0000-0001-6772-9291
citation: 
  url: https://drthinhong.com/blog/2024-12-15-software-showcase/
execute: 
  eval: false
format: 
  html:
    df-print: paged
draft: true
---

I've developed a few software tools and wanted to showcase them on my Quarto website. Using my spreadsheet, which was originally designed for building my CV, I extended its purpose to create a software showcase. In this tutorial, I'll show you how to structure your data and display it effectively on your site.

## Step 1: Organize your software data

Start with a spreadsheet containing details about your software. For example:

```{r}
#| echo: false
#| eval: true
cv_sheet <- data.frame(
  name = c("denim", "serosv"),
  year = c(2025, 2025),
  category = c("Infectious Disease Modelling", "Infectious Disease Modelling"),
  lang1 = c("R", "R"),
  lang2 = c("C++", NA),
  author = c("T Ong, TQA Phan, ML Ha, M Choisy", "TQA Phan, NTN Pham, TL Bui, NT Huynh"),
  summary = c("Construct and simulate deterministic models", "Analyse serological data and estimate parameters"),
  logo = c("../img/software/denim.svg", "../img/software/serosv.svg"),
  url_github = c("https://example.com/denim", "https://example.com/serosv"),
  url_paper = c(NA, NA),
  url_cran = c("https://doi.org/example/denim", NA),
  url_codecov = c("https://example.com/codecov/denim", "https://example.com/codecov/serosv"),
  token_codecov = c("https://example.com/token/denim.svg", "https://example.com/token/serosv.svg"),
  stringsAsFactors = FALSE
)

cv_sheet
```


Save this file as a Google Sheet or CSV.

## Step 2: Read the Spreadsheet in Your Quarto Project

To pull the spreadsheet data into your R code, use the `googlesheets4` package. Authenticate your account and read the sheet:

```{r}
library(googlesheets4)
gs4_auth("your_email@gmail.com")
cv_sheet <- read_sheet(
  ss = "<your-google-sheet-link>",
  sheet = "software"
)

cv_sheet$logo <- paste0("../img/software/", cv_sheet$logo)
```



This will create a data frame with all your software details.

## Step 3: Write a Function to Generate HTML

Now, let's create a function `gen_software_table()` to process the data and output an HTML table with Bootstrap 5 CSS. We'll explain each section of the function below.

```{r}
gen_software_table <- function(cv_sheet) {
  z <- cv_sheet
  out <- ""

  # Group by category
  for (category in unique(z$category)) {
    out <- paste0(out, "### ", category, "\n\n")
    tmp <- z[z$category == category, ]
    out <- paste0(out, "<table class='table'>")

    # Iterate over each software entry
    for (i in 1:nrow(tmp)) {
      out <- paste0(out, "\n  <tr>")

      # Name, Summary, Authors
      out <- paste0(
        out,
        "<td class='w-75'>",
        "<a class='link-dark' href='", tmp$url_github[i], "' target='_blank'>",
        "<strong>", tmp$name[i], "</strong></a>"
      )

      # Codecov badge
      if (!is.na(tmp$url_codecov[i])) {
        out <- paste0(
          out,
          "<a style='float:right;' href='", tmp$url_codecov[i], "' target='_blank'><img src='",
          tmp$token_codecov[i], "'/></a>"
        )
      }

      out <- paste0(out, "<br>", tmp$summary[i], "<br>")

      # Highlight specific authors (e.g., "T Ong")
      author_text <- gsub("T Ong", "<strong>T Ong</strong>", tmp$author[i], fixed = TRUE)
      out <- paste0(out, "<small>Authors: ", author_text, "</small><br>")

      # Add language badges
      lang1_badge <- ifelse(
        tmp$lang1[i] == "R", "bg-primary",
        ifelse(tmp$lang1[i] == "C++", "bg-warning", "bg-secondary")
      )
      out <- paste0(out, "<span class='badge rounded-pill ", lang1_badge, "'>", tmp$lang1[i], "</span> ")

      if (!is.na(tmp$lang2[i])) {
        lang2_badge <- ifelse(
          tmp$lang2[i] == "R", "bg-primary",
          ifelse(tmp$lang2[i] == "C++", "bg-warning", "bg-secondary")
        )
        out <- paste0(out, "<span class='badge rounded-pill ", lang2_badge, "'>", tmp$lang2[i], "</span> ")
      }

      # Paper and CRAN badges
      if (!is.na(tmp$url_paper[i])) {
        out <- paste0(
          out,
          "<a href='", tmp$url_paper[i], "' target='_blank'>",
          "<span class='badge rounded-pill bg-light border border-2 border-dark text-dark mx-1' style='float:right;'>Paper</span></a>"
        )
      }
      if (!is.na(tmp$url_cran[i])) {
        out <- paste0(
          out,
          "<a href='", tmp$url_cran[i], "' target='_blank'>",
          "<span class='badge rounded-pill bg-light border border-2 border-success text-success' style='float:right;'>CRAN</span></a>"
        )
      }

      # Add logo with hyperlink
      out <- paste0(out, "</td>")
      out <- paste0(out, "<td class='w-25'><a href='", tmp$url_github[i], "' target='_blank'>")
      out <- paste0(out, "<img src='", tmp$logo[i], "' alt='Logo' style='max-width:120px; width:100%; height:auto;'></a></td>")

      out <- paste0(out, "</tr>")
    }

    out <- paste0(out, "\n</table>\n\n")
  }

  cat(out)
}
```

### Key Sections of the Function

Here’s how to turn the spreadsheet template into a dataframe and explain the `gen_software_table()` function step-by-step. I'll present the code and provide the explanation outside of the code block as requested.

---

### Displaying the Spreadsheet as a Dataframe

You can create the dataframe in R directly using the following code. Note that the actual links are hidden here:

```r
cv_sheet <- data.frame(
  name = c("denim", "serosv"),
  year = c(2025, 2025),
  category = c("Infectious Disease Modelling", "Infectious Disease Modelling"),
  lang1 = c("R", "R"),
  lang2 = c("C++", NA),
  author = c("T Ong, TQA Phan, ML Ha, M Choisy", "TQA Phan, NTN Pham, TL Bui, NT Huynh"),
  summary = c("Construct and simulate deterministic models", "Analyse serological data and estimate parameters"),
  logo = c("../img/software/denim.svg", "../img/software/serosv.svg"),
  url_github = c("https://example.com/denim", "https://example.com/serosv"),
  url_paper = c(NA, NA),
  url_cran = c("https://doi.org/example/denim", NA),
  url_codecov = c("https://example.com/codecov/denim", "https://example.com/codecov/serosv"),
  token_codecov = c("https://example.com/token/denim.svg", "https://example.com/token/serosv.svg"),
  stringsAsFactors = FALSE
)
```

Below is a step-by-step breakdown of what each part of the function is doing:

#### 1. **Grouping by Category**
The code loops through each unique category in the dataframe. For each category, it creates a section in the output HTML with a subheading:

```r
for (category in unique(z$category)) {
  out <- paste0(out, "### ", category, "\n\n")
```
- **Purpose**: Organize the software by their categories for better readability.

#### 2. **Creating a Table**
A new HTML table is started for each category:

```r
out <- paste0(out, "<table class='table'>")
```
- **Purpose**: Use Bootstrap’s table class for a clean and responsive design.

#### 3. **Iterating Over Entries**
The loop iterates through all rows of the dataframe belonging to the current category:

```r
for (i in 1:nrow(tmp)) {
  out <- paste0(out, "\n  <tr>")
```
- **Purpose**: Process each software entry and format it as a table row.

#### 4. **Adding Software Details**
Inside the loop, it constructs the HTML for each software’s details:

- **Name and Summary**:
  ```r
  out <- paste0(
    out,
    "<td class='w-75'>",
    "<a class='link-dark' href='", tmp$url_github[i], "' target='_blank'>",
    "<strong>", tmp$name[i], "</strong></a>"
  )
  ```
  This adds the software name as a clickable link to its GitHub repository.

- **Summary and Author Information**:
  ```r
  out <- paste0(out, "<br>", tmp$summary[i], "<br>")
  author_text <- gsub("T Ong", "<strong>T Ong</strong>", tmp$author[i], fixed = TRUE)
  out <- paste0(out, "<small>Authors: ", author_text, "</small><br>")
  ```

#### 5. **Adding Language Badges**
The function generates color-coded badges for the programming languages:

```r
lang1_badge <- ifelse(
  tmp$lang1[i] == "R", "bg-primary",
  ifelse(tmp$lang1[i] == "C++", "bg-warning", "bg-secondary")
)
out <- paste0(out, "<span class='badge rounded-pill ", lang1_badge, "'>", tmp$lang1[i], "</span> ")
```
- **Purpose**: Highlight the languages with different colors for better visual distinction.

#### 6. **Adding Logos**
The logo is included as an image linked to the GitHub page:

```r
out <- paste0(out, "<td class='w-25'><a href='", tmp$url_github[i], "' target='_blank'>")
out <- paste0(out, "<img src='", tmp$logo[i], "' alt='Logo' style='max-width:120px; width:100%; height:auto;'></a></td>")
```
- **Purpose**: Provide a visual representation of the software.

#### 7. **Paper and CRAN Badges**
Badges for associated papers and CRAN links are conditionally added:

```r
if (!is.na(tmp$url_paper[i])) {
  out <- paste0(
    out,
    "<a href='", tmp$url_paper[i], "' target='_blank'>",
    "<span class='badge rounded-pill bg-light border border-2 border-dark text-dark mx-1' style='float:right;'>Paper</span></a>"
  )
}
```
- **Purpose**: Highlight additional resources with badges.

### Output the Table
The final HTML is assembled, and the function outputs it using `cat()`:

```r
cat(out)
```
- **Purpose**: Render the constructed HTML in the Quarto page.


## Step 4: Embed the Table in Your Quarto File

In your `software.qmd` file, call the function using `asis` output to render raw HTML:

```{r}
#| output: asis
gen_software_table(cv_sheet)
```

This will insert the HTML table directly into your Quarto page.

## Conclusion

By following these steps, you can create a visually appealing and dynamic software page for your Quarto website. The use of a spreadsheet makes it easy to update and manage your software listings, while the R code ensures a consistent and automated rendering process.
